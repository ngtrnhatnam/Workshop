[
{
	"uri": "//localhost:1313/vi/5-lambda-api-setup/5.1-create-lambda-save-history/",
	"title": "Tạo Lambda Function lưu lịch sử",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo Lambda function sử dụng Python để lưu lịch sử dự đoán vào DynamoDB.\n1. Tạo Lambda Function mới Vào AWS Console → Lambda\nHình 1: Tìm kiếm và truy cập dịch vụ Lambda trong AWS Console.\nChọn tab Functions → nhấn nút Create function.\nHình 2: Bắt đầu tạo function lưu lịch sử.\nChọn Author from scratch.\nFunction name: SavePredictionHistory\nRuntime: Chọn Python 3.13 hoặc phiên bản gần nhất.\nNhấn Create function để tạo Lambda mới.\nHình 3: Thiết lập thông tin cho Lambda lưu lịch sử.\n2. Thiết lập function cho Lambda Sau đó màn hình sẽ chuyển qua để chúng ta thiết lập function.\nHình 4: Màn hình để thiết lập function.\nCác bạn quay lại project tại đường dẫn src/lambda/lambda_history.py, các bạn tiến hành sao chép toàn bộ.\nHình 5: Thiết lập thông tin cho Lambda lưu lịch sử.\nQuay lại console, tại tab Code sẽ có 1 màn hình giống của VS Code.\nCác bạn dán toàn bộ code vào trong, sau đó nhấn deploy\nHình 6: Thiết lập funtion để deploy.\n3. Thiết lập IAM Role cho Lambda Vào AWS Console → IAM\nHình 7: Tìm kiếm và truy cập dịch vụ IAM trong AWS Console.\nChọn tab Access managemen → Roles. Tại ô Search, tiến hành tìm SavePredictionHistory, role sẽ có tên dạng SavePredictionHistory-role-xxxxx, nhấn vào chọn role đó.\nHình 8: Tìm kiếm IAM Role.\nTại tab Permissions policies, chúng ta chọn Add permissions bên phía bên tay phải, rồi chọn tiếp Attach Policies\nHình 9: Chuẩn bị thêm quyền hạn cho Lambda.\nTại tab Other permissions policies, tìm kiếm AmazonDynamoDBFullAccess và tick vào, sau đó chọn Add permission\nHình 10: Thêm quyền hạn cho Lambda đối với DynamoDB.\nCũng khá là dễ mà đúng không?\nNếu bạn đã hoàn thành và sẵn sàng, tiếp tục sang Thiết lập Lambda function gọi Sagemaker Endpoint nào!\n"
},
{
	"uri": "//localhost:1313/vi/3-quick-create-sagemaker-ai/3.1-set-up-sagemaker-ai/",
	"title": "Thiết lập SageMaker AI",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Khởi tạo SageMaker AI bằng tính năng Quick setup cho người dùng đơn, sẵn sàng triển khai mô hình AI.\n1. Truy cập SageMaker Đăng nhập AWS Management Console. Tìm kiếm SageMaker AI và mở dịch vụ. Hình 1: Tìm kiếm và truy cập dịch vụ SageMaker trong AWS Console.\n2. Chọn Quick setup Ở màn hình chính của SageMaker, tìm phần New to SageMaker AI? Nhấn Set up for single user. Hình 2: Tùy chọn Quick setup cho người dùng đơn.\n3. Xác nhận cấu hình mặc định AWS sẽ tự động đề xuất cấu hình và các thiết lập mặc định, bạn chỉ việc đợi load xong. Hình 3: Giao diện xác nhận cấu hình Quick setup.\n4. Chờ khởi tạo Trạng thái ban đầu: Pending → sẽ chuyển sang InService khi hoàn tất. Quá trình này thường mất vài phút. Lưu ý nhỏ: Khi sử dụng Quick setup của SageMaker, hệ thống sẽ tự động tạo cho bạn các IAM Role và Policy cần thiết để SageMaker hoạt động trơn tru mà bạn không cần phải tạo thủ công.\nNếu bạn muốn tuỳ chỉnh quyền hạn hoặc triển khai trong môi trường sản xuất, có thể tạo và gán IAM Role riêng cho SageMaker.\nVới mục đích workshop này, bạn hoàn toàn có thể yên tâm sử dụng các Role mặc định do AWS tạo sẵn nhé!\nXong chưa nè?\nTiếp theo, chúng ta sẽ Upload model đã huấn luyện nha!\n"
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": " Khám phá sức mạnh của AI thời gian thực trên nền tảng đám mây!\nWorkshop này sẽ hướng dẫn bạn từng bước xây dựng ứng dụng web nhận diện hình ảnh serverless, sử dụng dịch vụ AWS để xử lý, dự đoán và lưu trữ dữ liệu hình ảnh một cách nhanh chóng, an toàn và tiết kiệm chi phí.\nTrong thời đại AI, việc xây dựng các ứng dụng thời gian thực có khả năng mở rộng, bảo mật và dễ bảo trì là ưu tiên hàng đầu. Workshop \u0026ldquo;Triển khai ứng dụng nhận diện hình anh thời gian thực Serverless với Lambda và SageMaker\u0026rdquo; sẽ giúp bạn tích hợp mô hình Machine Learning đã huấn luyện sẵn vào giao diện web, cho phép dự đoán theo thời gian thực mà không cần quản lý máy chủ.\nỨng dụng hỗ trợ:\nTải ảnh trực tiếp từ trình duyệt. Dự đoán tức thì từ mô hình ML đã deploy. Lưu lịch sử dự đoán vào DynamoDB để theo dõi. Giao diện đơn giản, responsive cho trải nghiệm mượt mà. Kiến trúc serverless — không cần bảo trì máy chủ. Lợi ích của ứng dụng Serverless Hệ sinh thái serverless của AWS mang lại nhiều lợi ích cho ứng dụng AI:\n1. Xử lý thời gian thực AWS Lambda thực hiện dự đoán ngay khi nhận ảnh, đảm bảo độ trễ thấp.\nVí dụ: Người dùng tải ảnh chữ số viết tay và hệ thống lập tức trả về con số dự đoán.\n2. Tự Động Mở Rộng Lambda tự động scale theo nhu cầu — dù chỉ 1 hay 1.000 người dùng tải ảnh cùng lúc.\n3. Xử Lý Dữ Liệu An Toàn API Gateway kết hợp với IAM roles và resource policies để đảm bảo:\nChỉ các lời gọi được ủy quyền mới đến được Lambda. Quyền đọc/ghi DynamoDB được giới hạn rõ ràng. Ví dụ: Lambda dự đoán chỉ có quyền ghi vào bảng PredictionHistory chứ không thể xóa dữ liệu.\n4. Tiết Kiệm Chi Phí Bạn chỉ trả tiền cho những gì bạn dùng:\nLambda: Tính phí dựa trên thời gian thực thi. DynamoDB: Tính phí theo số request. S3: Tính phí lưu trữ file tĩnh. 5. Truy Cập Nhanh \u0026amp; Trải Nghiệm Mượt Mà Giao diện web (HTML, CSS, JS) sẽ chạy trực tiếp trên máy local thông qua Live Server của VS Code. Cách này giúp phát triển, test và sửa UI nhanh chóng mà không cần deploy file tĩnh lên S3.\nMục Tiêu Workshop Hoàn thành workshop này, bạn sẽ học được cách:\nMục tiêu Công nghệ Kết quả Thiết kế giao diện đơn giản, responsive HTML, CSS Giao diện upload ảnh dễ dùng Xây dựng và bảo mật API API Gateway Endpoint để gửi ảnh và nhận dự đoán Triển khai suy luận ML AWS Lambda, SageMaker Endpoint Dự đoán thời gian thực từ model đã huấn luyện Lưu trữ kết quả DynamoDB Lưu lịch sử dự đoán để tra cứu sau Giám sát \u0026amp; gỡ lỗi S3, CloudFront Fast, worldwide content delivery Monitor and debug CloudWatch Theo dõi và phân tích hiệu suất hệ thống Bắt đầu hành trình nào! Khi kết thúc workshop này, bạn sẽ có được:\nMột ứng dụng nhận diện ảnh thời gian thực hoạt động hoàn chỉnh. Kinh nghiệm thực tế kết nối các dịch vụ AWS thành một quy trình serverless. Kỹ năng triển khai ứng dụng AI mà không cần quản lý server. Sẵn sàng chưa nè?\nChúng ta đi tiếp đến các bước chuẩn bị để thiết lập môi trường AWS nha!\n"
},
{
	"uri": "//localhost:1313/vi/5-lambda-api-setup/5.2-create-lambda-call-sagemaker/",
	"title": "Tạo Lambda Function gọi Sagemaker Endpoint",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo Lambda function sử dụng Python để lưu lịch sử dự đoán vào DynamoDB.\n1. Tạo Lambda Function mới Vào AWS Console → Lambda\nHình 1: Tìm kiếm và truy cập dịch vụ Lambda trong AWS Console.\nChọn tab Functions → nhấn nút Create function.\nHình 2: Bắt đầu tạo function gọi endpoint.\nChọn Author from scratch.\nFunction name: InvokeModelLambda\nRuntime: Chọn Python 3.13 hoặc phiên bản gần nhất.\nNhấn Create function để tạo Lambda mới.\nHình 3: Thiết lập thông tin cho Lambda gọi endpoint.\n2. Thiết lập function cho Lambda Sau đó màn hình sẽ chuyển qua để chúng ta thiết lập function.\nHình 4: Màn hình để thiết lập function.\nCác bạn quay lại project tại đường dẫn src/lambda/lambda_function.py, các bạn tiến hành sao chép toàn bộ.\nHình 5: Thiết lập thông tin cho Lambda lưu lịch sử.\nQuay lại console, tại tab Code sẽ có 1 màn hình giống của VS Code.\nCác bạn dán toàn bộ code vào trong, sau đó nhấn deploy\nHình 6: Thiết lập funtion để deploy.\n3. Thiết lập IAM Role cho Lambda Vào AWS Console → IAM\nHình 7: Tìm kiếm và truy cập dịch vụ IAM trong AWS Console.\nChọn tab Access managemen → Roles. Tại ô Search, tiến hành tìm InvokeModelLambda, role sẽ có tên dạng InvokeModelLambda-role-xxxxx, nhấn vào chọn role đó.\nHình 8: Tìm kiếm IAM Role.\nTại tab Permissions policies, chúng ta chọn Add permissions bên phía bên tay phải, rồi chọn tiếp Attach Policies\nHình 9: Chuẩn bị thêm quyền hạn cho Lambda.\nTại tab Other permissions policies, tìm kiếm AmazonDynamoDBFullAccess và tick vào, sau đó chọn Add permission\nHình 10: Thêm quyền hạn cho Lambda đối với DynamoDB.\nTiếp tục chọn Add permissions bên phía bên tay phải, rồi chọn tiếp Create Inline Policy.\nSau đó chọn JSON tại Policy Editor\nHình 11: Tiếp tục thêm quyền hạn cho Lambda.\nRồi dán đoạn này vào, sau đó chọn Next:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;VisualEditor0\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;sagemaker:InvokeEndpoint\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Hình 12: Tiếp tục thêm quyền hạn cho Lambda.\nTại Policy name, đặt tên là Invoke-endpoint, cuối cùng chọn Create Policy Hình 13: Hoàn tất thêm quyền hạn cho Lambda.\nCũng khá là dễ mà đúng không?\nNếu bạn đã hoàn thành và sẵn sàng, tiếp tục sang Thiết lập API Gateway nào!\n"
},
{
	"uri": "//localhost:1313/vi/3-quick-create-sagemaker-ai/3.2-upload-trained-model/",
	"title": "Upload mô hình đã huấn luyện",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Hướng dẫn cách upload mô hình Machine Learning đã được huấn luyện sẵn lên SageMaker để deploy làm Endpoint.\n1. Chuẩn bị mô hình Tại thư mục dự án đường dẫn assets/models, bạn đã được cung cấp sẵn hai file:\ninference.py (script inference)\nmobilenetv3_small.pt (file model đã huấn luyện)\nHình 1: Hai file đã được cung cấp sẵn.\nĐóng gói hai file này thành một file nén model.tar.gz để SageMaker có thể sử dụng, sau đó quay trở về thư mục gốc để dễ thao tác hơn:\ncd assets/models tar -czvf model.tar.gz mobilenetv3_small.pt inference.py cd ../.. Hình 2: Kết quả sau khi đóng gói xong và quay về thư mục gốc.\n2. Lấy ARN của IAM Role do SageMaker tự động tạo Vào AWS Console → IAM → Roles.\nHình 3: Tìm kiếm và truy cập dịch vụ SageMaker trong AWS Console.\nTìm role tự động sinh cho SageMaker có dạng: AmazonSageMaker-ExecutionPolicy-xxxxxxx.\nHình 4: Tìm kiếm và truy cập dịch vụ SageMaker trong AWS Console.\nCopy ARN của role này.\nHình 5: Tìm kiếm và truy cập dịch vụ SageMaker trong AWS Console.\n3. Cập nhật IAM Role trong script deploy Mở file tại đường dẫn src/sagemaker/deploy_model.py trong dự án.\nNhấn Ctrl + F, tìm role =.\nHình 6: Tìm kiếm vị trí cần thay ARN.\nThay giá trị role bên trong nháy đôi \u0026quot;\u0026quot; bằng ARN đã copy.\nHình 7: Thay ARN đã được sao chép tại bước của hình thứ 5.\nCuối cùng nhấn Ctrl + S để lưu.\n4. Chạy script deploy model Mở terminal và chạy lệnh:\npython src/sagemaker/deploy_model.py Script sẽ upload model.tar.gz lên S3 và triển khai Endpoint SageMaker. Sau khi hoàn tất sẽ được trả về thông tin Endpoint có dạng dogcat-endpoint-xxxxx, sao chép lại.\nHình 8: Đã upload thành công.\n5. Cập nhật endpoint trong script deploy Mở file tại đường dẫn src/lambda/lambda_function.py trong dự án.\nNhấn Ctrl + F, tìm EndpointName=.\nHình 9: Tìm kiếm vị trí cần thay Endpoint.\nThay giá trị role bên trong nháy đơn ' ' bằng Endpoint đã copy.\nHình 10: Thay Endpoint đã được sao chép tại bước của hình thứ 8.\nCuối cùng nhấn Ctrl + S để lưu.\nXong chưa nè?\nTiếp theo bạn có thể chuyển sang phần Tạo bảng DynamoDB nha!\n"
},
{
	"uri": "//localhost:1313/vi/2-preparation-steps/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Thiết lập môi trường cần thiết để triển khai ứng dụng nhận diện hình ảnh serverless, bao gồm tài khoản AWS, các IAM Role, Lambda, API Gateway, bảng DynamoDB, và Sagemaker.\nĐể bắt đầu workshop \u0026ldquo;Triển khai ứng dụng nhận diện hình anh thời gian thực Serverless với Lambda và SageMaker\u0026rdquo;, bạn cần chuẩn bị các thành phần cơ bản để đảm bảo tích hợp mượt mà với các dịch vụ AWS như Lambda, DynamoDB, API Gateway và Sagemaker Endpoint.\nYêu Cầu Ban Đầu Bạn cần có một tài khoản AWS để thực hiện các bước trong workshop. Nếu chưa có, hãy tạo tài khoản trước khi tiếp tục.\n📖 Tham khảo: Hướng dẫn tạo tài khoản AWS\nDanh sách bước chuẩn bị Bước Nội Dung Mô Tả 2.1 Cài đặt công cụ cần thiết Cài Python, VS Code, AWS CLI và các thư viện Python bắt buộc. 2.2 Chuẩn bị môi trường Cấu hình môi trường làm việc và kiểm tra kết nối AWS CLI. Lưu ý: Thực hiện các bước theo thứ tự để đảm bảo môi trường được thiết lập chính xác. Mỗi bước sẽ được hướng dẫn chi tiết trong các tài liệu tương ứng.\nKết luận Hoàn thành các bước chuẩn bị này, bạn sẽ có:\nAWS Account đã sẵn sàng để sử dụng. Công cụ phát triển (Python, VS Code, AWS CLI, các thư viện cần thiết) đã cài đặt đầy đủ. Môi trường làm việc đã cấu hình để kết nối với AWS. Sẵn sàng bước sang phần tiếp theo để xây dựng ứng dụng nhận diện hình ảnh serverless. Xong hết chưa nè?\nMình chuyển đến Cài đặt công cụ cần thiết để bắt đầu nha, hy vọng bạn đã sẵn sàng!\n"
},
{
	"uri": "//localhost:1313/vi/2-preparation-steps/2.1-install-necessary-tool/",
	"title": "Cài đặt công cụ cần thiết",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Cài đặt Python, VS Code, AWS CLI và các thư viện Python cần thiết để phát triển ứng dụng serverless nhận diện hình ảnh.\nYêu Cầu Ban Đầu Trước khi bắt đầu, hãy đảm bảo máy tính bạn đã sẵn sàng với các công cụ cần thiết nhé!\n1. Python Tải và cài đặt Python. Kiểm tra cài đặt bằng lệnh: python --version Nếu bạn được trả kết quả có dạng bên dưới thì chúng ta đến bước tiếp theo nhé: Python 3.xx.x x là số phiên bản nha, ví dụ như Python 3.13.1 như mình là ổn rồi nè 💖\nHình 1: Giao diện Console kiểm tra phiên bản Python sau khi cài.\n2. Visual Studio Code (VS Code) Tải và cài đặt VS Code. Cài đặt các extension hữu ích: Python (Microsoft):\nHình 2: Giao diện VS Code cài đặt extension Python.\nLive Server để chạy giao diện web local:\nHình 3: Giao diện VS Code cài đặt extension Live Server.\n3. AWS CLI Tải và cài đặt AWS CLI. Kiểm tra cài đặt bằng lệnh: aws --version Nếu bạn được trả kết quả có dạng bên dưới thì chúng ta đến bước tiếp theo nhé: aws-cli/2.27.52 Python/3.13.4 Windows/11 exe/AMD64 Thông số có thể khác nhau tùy phiên bản/chipset của máy, đừng lo lắng nhé 💪\nHình 4: Giao diện Console kiểm tra AWS CLI sau khi cài.\nXong hết chưa nè?\nMình chuyển đến Chuẩn bị môi trường để tiếp tục nha! ✨\n"
},
{
	"uri": "//localhost:1313/vi/2-preparation-steps/2.2-set-up-environment/",
	"title": "Chuẩn bị môi trường",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Fork \u0026amp; clone project, tạo môi trường ảo và cài các thư viện Python cần thiết để chạy ứng dụng.\n1. Fork và Clone Project Truy cập GitHub repo dự án của tui nè: Serverless-ML-Inference-with-Lambda-and-SageMaker Nhấn Fork để tạo bản sao về tài khoản GitHub của bạn. Clone về máy: git clone https://github.com/\u0026lt;your-username\u0026gt;/Serverless-ML-Inference-with-Lambda-and-SageMaker.git cd Serverless-ML-Inference-with-Lambda-and-SageMaker code . 2. Tạo và kích hoạt môi trường ảo (Virtual Environment) Tạo môi trường ảo: python -m venv .venv Sau đó kích hoạt môi trường ảo:\nWindows: .venv\\Scripts\\activate macOS / Linux: source .venv/bin/activate Nếu thành công, bạn sẽ thấy tên môi trường (ví dụ .venv) xuất hiện ở đầu dòng lệnh.\nHình 1: Giao diện Console kiểm tra môi trường ảo đã được kích hoạt chưa.\n3. Cài đặt các thư viện cần thiết Cài đặt nhanh các thư viện cần thiết: pip install boto3 sagemaker torch torchvision pillow Lưu ý:\nNếu bạn cần train model local, hãy đảm bảo đã cài gcc hoặc build tools tương ứng với hệ điều hành của bạn. Thư viện torch có thể mất vài phút để cài, tuỳ tốc độ mạng, đừng nóng vội nha Cũng dễ mà phải hong?\nVậy mình chuyển đến Thiết lập Sagemake AI để tiếp tục nha! ✨\n"
},
{
	"uri": "//localhost:1313/vi/5-lambda-api-setup/5.3-create-api-gateway/",
	"title": "Tạo API Gateway",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo API Gateway để giao tiếp với Lambda.\n1. Tạo API Gateway mới Vào AWS Console → API Gateway.\nHình 1: Tìm kiếm và truy cập dịch vụ API Gateway trong AWS Console.\nChọn tab APIs → nhấn nút Create API.\nHình 2: Bắt đầu tạo API mới.\nTại HTTP API, chọn Build.\nHình 3: Chọn phương thức HTTP.\nTiếp tục tại Step 1, ta đặt API name là MLInferenceAPI, sau đó chọn Next\nHình 4: Tiến hành đặt tên cho API.\nTại Step 2 chọn Next, đến Step 3 chúng ta đặt Stage name là prod, rồi tiếp tục chọn Next.\nHình 5: Tiến hành đặt Stage name.\nTại Step 4, chọn Create.\nHình 6: Hoàn tất sơ bộ tạo API.\n2. Thiết lập routers cho API Sau đó màn hình sẽ chuyển qua tab Develop → Routers, tại đây chúng ta set up router trước để gắn cho Lambda ở các bước sau, chọn Create.\nHình 7: Bắt đầu tạo router.\nCác bạn quay lại tiến hành tạo liên tiếp 2 router là:\n/history và Hình 8: Tiến hành tạo router history.\n/predict Hình 9: Tiến hành tạo router predict.\n3. Thiết lập CORS cho API Tại tab Develop → CORS chúng ta chọn Configure để tiến hành set up:\nHình 10: Tiến hành set up CORS.\nAccess-Control-Allow-Origin: nhập *, sau đó chọn Add bên cạnh. Access-Control-Allow-Headers: nhập content-type, sau đó cũng chọn Add bên cạnh. Access-Control-Allow-Methods: chúng ta sẽ tick vào 3 options là GET, POST và OPTION. Access-Control-Expose-Headers: để trống. Cuối cùng chọn Save. Hình 11: Thiết lập thông số cho CORS.\n4. Gắn API vào Lambda Tại tab Develop → Integrations chúng ta chọn /history - ANY → Create and attach an integration để tiến hành set up:\nHình 12: Tiến hành gắn API.\nTại tab Integration target - Integration type: chọn Lambda Function. AWS Region: chọn region có chứa Lambda Function, ở đây mình chọn ap-southeast-1 Lambda function: chọn fuction để lưu tương tác với Sagemaker Endpoint trước đó chúng ta tạo với tên là SavePredictionHistory. Cuối cùng chọn Create. Hình 13: Thiết lập thông số.\nTương tự với /predict - POST. Chỉ khác tại Lambda function: chọn fuction để gọi endpoint trước đó chúng ta tạo với tên là InvokeModelLambda\nLời kết Giờ thì API đã sẵn sàng đón nhận request từ frontend rồi đó bạn iu ơi!\nXong rồi đúng hông?\nBay đến Giao diện trang web để chiến tiếp nào! 🚀✨\n"
},
{
	"uri": "//localhost:1313/vi/3-quick-create-sagemaker-ai/",
	"title": "Tạo nhanh SageMaker AI",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Tạo nhanh một mô hình AI trên AWS SageMaker, sẵn sàng để tích hợp vào ứng dụng serverless nhận diện hình ảnh của bạn.\nGiới thiệu Trong phần này, chúng ta sẽ khởi tạo nhanh SageMaker AI để phục vụ việc nhận diện hình ảnh thời gian thực.\nQuy trình này bao gồm:\nTạo SageMaker Studio để làm việc. Cấu hình IAM Role để SageMaker có quyền truy cập S3, Lambda, và các dịch vụ AWS liên quan. Upload mô hình đã train sẵn để sẵn sàng triển khai. Các bước chính Bước Nội dung 3.1 Thiết lập SageMaker AI 3.2 Thiết lập IAM Role cho SageMaker 3.3 Upload mô hình đã train Lưu ý: Bạn cần hoàn thành phần 2 – Các bước chuẩn bị trước khi tiếp tục, để đảm bảo môi trường AWS và công cụ đã sẵn sàng.\nKết luận Khi hoàn thành phần này, bạn sẽ:\nCó môi trường SageMaker sẵn sàng hoạt động. Đã gán quyền truy cập đầy đủ cho SageMaker. Upload xong mô hình để triển khai vào ứng dụng serverless. Sẵn sàng chưa nè?\nChúng ta bắt đầu với Thiết lập SageMaker AI nha!\n"
},
{
	"uri": "//localhost:1313/vi/4-create-dynamodb/",
	"title": "Tạo DynamoDB Table: PredictionHistory",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Hiểu về DynamoDB và tạo bảng PredictionHistory để lưu lịch sử dự đoán hình ảnh.\nGiới thiệu DynamoDB DynamoDB là dịch vụ cơ sở dữ liệu NoSQL serverless của AWS, rất nhanh, có khả năng mở rộng tự động và không cần quản lý server. Rất phù hợp để lưu trữ dữ liệu như lịch sử dự đoán của ứng dụng serverless.\nTạo bảng PredictionHistory Vào AWS Console → DynamoDB\nHình 1: Tìm DynamoDB tại console.\nTiếp tục chọn Table → Create Table để tạo bảng mới\nHình 2: Nhấn vào Create Table để bắt đầu tạo bảng mới.\nĐặt tên bảng: PredictionHistory.\nThiết lập Partition key: id (Kiểu String).\nBỏ qua phần Sort key (không cần).\nHình 3: Thiết lập các thuộc tính cho bảng mới.\nĐể các thiết lập còn lại mặc định, nhấn Create table.\nHình 4: Nhấn Create Table để tạo bảng mới.\nLời kết Bây giờ bạn đã có bảng PredictionHistory sẵn sàng để lưu dữ liệu từ Lambda functions. Tiếp theo, chúng ta sẽ tạo Lambda function để sử dụng bảng này nha!\nSẵn sàng chưa nè?\nChuyển sang Tạo Lambda function và API nha!\n"
},
{
	"uri": "//localhost:1313/vi/5-lambda-api-setup/",
	"title": "Giới thiệu Lambda và API Gateway",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Hiểu tổng quan về vai trò của AWS Lambda và API Gateway trong ứng dụng serverless nhận diện hình ảnh.\nAWS Lambda là gì? AWS Lambda là dịch vụ compute serverless của AWS, cho phép bạn chạy mã (code) mà không cần quản lý server. Lambda tự động mở rộng, chỉ tính phí theo thời gian thực thi.\nỨng dụng Lambda trong workshop:\nXử lý các yêu cầu người dùng (upload hình ảnh, gọi dự đoán). Lưu trữ lịch sử dự đoán vào DynamoDB. Gọi mô hình Machine Learning trên SageMaker để trả kết quả dự đoán. API Gateway là gì? API Gateway là dịch vụ quản lý API của AWS, giúp bạn tạo, bảo mật, theo dõi và vận hành các API RESTful hoặc WebSocket.\nVai trò trong workshop:\nCung cấp endpoint RESTful để frontend gửi ảnh và nhận kết quả dự đoán. Kết nối với các Lambda function xử lý logic backend. Quản lý bảo mật và phân quyền truy cập API. Kiến trúc tổng thể Frontend → API Gateway → Lambda (gọi SageMaker) → SageMaker Endpoint → Lambda (lưu lịch sử) → DynamoDB\nCác bước chính Bước Nội dung 5.1 Thiết lập Lambda Function lưu lịch sử 5.2 Thiết lập Lambda Function gọi endpoint Sagemaker 5.3 Thiết lập API Gateways Sẵn sàng chưa?\nTiếp theo, ta sẽ tạo Lambda function lưu lịch sử trong phần Thiết lập Lambda Function lưu lịch sử nha!\n"
},
{
	"uri": "//localhost:1313/vi/6-web-interface/",
	"title": "Thiết kế Giao Diện Web",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Xây dựng giao diện web đơn giản, thân thiện, hỗ trợ người dùng upload hình ảnh để dự đoán.\n1. Tổng quan về giao diện Giao diện web được thiết kế đơn giản, dễ dùng, tập trung vào chức năng upload ảnh và hiển thị kết quả dự đoán một cách rõ ràng, trực quan.\nHỗ trợ upload ảnh trực tiếp từ máy tính người dùng. Hiển thị ảnh vừa upload cùng kết quả dự đoán bên dưới. Có nút gửi dữ liệu để gọi API backend. Giao diện responsive, chạy ngon trên cả desktop và mobile. 2. Công nghệ sử dụng HTML5 cho cấu trúc trang. CSS3 cho tạo style đẹp, dễ nhìn. JavaScript (vanilla) để xử lý tương tác như upload ảnh, gọi API, hiển thị kết quả. 3. Cấu trúc trang chính \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Cat vs Dog Classifier\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Cat or Dog?\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Upload ảnh để phân loại\u0026lt;/h2\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;imageInput\u0026#34; accept=\u0026#34;image/*\u0026#34; /\u0026gt; \u0026lt;div id=\u0026#34;previewBox\u0026#34; style=\u0026#34;display:none;\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Ảnh bạn vừa chọn:\u0026lt;/h3\u0026gt; \u0026lt;img id=\u0026#34;previewImage\u0026#34; src=\u0026#34;\u0026#34; alt=\u0026#34;Preview\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button onclick=\u0026#34;sendImage()\u0026#34;\u0026gt;Phân loại\u0026lt;/button\u0026gt; \u0026lt;p id=\u0026#34;result\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;div id=\u0026#34;history\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Lịch sử đoán gần đây\u0026lt;/h2\u0026gt; \u0026lt;ul id=\u0026#34;historyList\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 4. Một số điểm lưu ý Nút “Dự đoán” sẽ gọi API backend qua JavaScript fetch. Ảnh được preview ngay khi chọn để người dùng kiểm tra. Kết quả dự đoán sẽ hiện ra trong \u0026lt;p id=\u0026quot;result\u0026quot;\u0026gt;. Thiết kế đơn giản, dễ bảo trì và mở rộng. 5. Hướng dẫn chỉnh sửa JS - API Gateway Vào AWS Console → API Gateway\nHình 1: Tìm API Gateway tại console.\nTruy cập vào tab Function - chọn InvokeModelLambda Function\nHình 2: Truy cập InvokeModelLambda.\nTiếp tục vào tab Configuration - Trigger. Tại dòng API Endpoint sao chép toàn bộ đường dẫn. Đường dẫn có dạng https://xxxx.execute-api.\u0026lt;vùng-của-bạn\u0026gt;.amazonaws.com/prod/predict.\nHình 3: Sao chép API Endpoint.\nQuay lại project, tại file script.js, các bạn nhấn Ctrl + F, điền Change predict. Các bạn thay đường dẫn bên trong cặp ngoặc kép \u0026quot; \u0026ldquo;.\nHình 4: Sao chép API Endpoint.\nTiếp tục tương tự với SavePredictionHistory, tuy nhiên ở project, các bạn nhấn Ctrl + F, điền Change history. Các bạn thay đường dẫn bên trong cặp ngoặc kép \u0026rdquo; \u0026ldquo;.\nCuối cùng nhấn Ctrl + S.\nSẵn sàng chưa?\nTiếp theo, bạn có thể chuyển sang phần Kiểm tra kết quả để xác minh hoạt động của toàn hệ thống nha!!\n"
},
{
	"uri": "//localhost:1313/vi/7-check-result/",
	"title": "Kiểm Tra Kết Quả",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Xác minh toàn bộ hệ thống (Web UI → API Gateway → Lambda → SageMaker → DynamoDB) hoạt động trơn tru.\n1. Mở giao diện web Quay lại project trên VS Code.\nTìm file main.html.\nNhấn chuột phải chọn Open with Live Server (trong VS Code).\nHình 1: Mở giao diện web qua Live Server.\n2. Upload ảnh để dự đoán Tại giao diện web, nhấn Choose File để chọn ảnh từ máy (ảnh chó hoặc mèo).\nẢnh sẽ hiển thị ở khung preview ngay bên dưới.\nNhấn nút Phân loại để gửi ảnh lên hệ thống.\nHình 2: Upload ảnh kiểm tra.\n3. Kiểm tra kết quả dự đoán Sau khi API xử lý, kết quả sẽ hiện ở vùng Kết quả dự đoán.\nNếu hệ thống kết nối đúng, bạn sẽ thấy thông tin như:\nNhãn dự đoán (Cat hoặc Dog) Hình 3: Kết quả dự đoán hiển thị.\n4. Kiểm tra lịch sử dự đoán Kéo xuống phần Lịch sử đoán gần đây.\nDanh sách hiển thị các dự đoán gần nhất được lưu trong DynamoDB.\nHình 4: Lịch sử dự đoán từ DynamoDB.\n5. Debug nếu gặp lỗi Nếu không thấy kết quả: Kiểm tra Console của trình duyệt (F12 → tab Console) để xem lỗi fetch API. Nếu lỗi CORS: Kiểm tra lại API Gateway → CORS đã bật cho cả phương thức OPTIONS và POST chưa. Nếu lỗi quyền: Xem lại IAM Role của Lambda đã có quyền sagemaker:InvokeEndpoint và dynamodb:PutItem chưa. Hoàn thành rồi đó!\nGiờ bạn đã có thể test nhiều ảnh khác nhau và xem kết quả real-time. Tiếp theo, hãy sang phần Dọn dẹp tài nguyên để dọn dẹp tài nguyên tránh phát sinh chi phí nhé!\n"
},
{
	"uri": "//localhost:1313/vi/8-cleanup/",
	"title": "Dọn Dẹp Tài Nguyên",
	"tags": [],
	"description": "",
	"content": " Mục tiêu: Xóa toàn bộ tài nguyên AWS đã tạo để tránh phát sinh chi phí ngoài ý muốn.\n1. Xóa endpoint trên SageMaker Xóa Endpoint Mở AWS Console → tìm Amazon SageMaker.\nỞ menu bên trái, chọn Inference → Endpoints.\nẢnh 1: Truy cập trang Endpoint.\nChọn endpoint của bạn (có dạng: dogcat-endpoint-xxxxxxxx) và nhấn vào Delete.\nNhấn xác nhận\nẢnh 2: Xóa Endpoint.\nXóa Endpoint Configurations Tiếp tục ở menu bên trái, chọn Inference → Endpoints configurations.\nẢnh 3: Truy cập trang Endpoint Configurations.\nChọn endpoint configurations của bạn (có dạng: dogcat-endpoint-xxxxxxxx) và nhấn vào Delete.\nNhấn xác nhận\nẢnh 4: Xóa Endpoint Configurations.\nXóa Model Vẫn trong SageMaker, chọn Inference → Models.\nChọn model cần xóa, chọn Action → Delete\nẢnh 4.1: Truy cập trang Model.\nNhấn Delete để xác nhận xóa\nẢnh 4.2: Xóa Model.\n2. Xóa dịch vụ Lambda Mở AWS Console → tìm Lambda.\nChọn 2 function đã tạo, bao gồm InvokeModelLambda, SaveHistoryLambda, chọn Action → Delete.\nẢnh 5: Truy cập trang Lambda.\nGõ confirm vào ô, sau đó chọn Delete.\nẢnh 6: Xóa Lambda.\n3. Xóa bảng DynamoDB Đi đến dịch vụ DynamoDB.\nChọn Tables bên tay trái, tick vào bảng đã tạo cần xóa PredictionHistory, chọn Delete\nẢnh 7: Truy cập trang DynamoDB Tables.\nGõ xác nhận confirm và chọn delete.\nẢnh 8: Xóa bảng PredictionHistory.\n4. Xóa API Gateway Đi đến dịch vụ API Gateway, chọn APIs bên tay trái.\nChọn API Gateway đã tạo MLInferenceAPI và chọn Delete.\nẢnh 9: Truy cập trang API Gateway.\nGõ xác nhận confirm và chọn delete.\nẢnh 10: Xóa API MLInferenceAPI.\n5. Xóa IAM Roles (Không ưu tiên nhưng vẫn nên xóa) Đi đến dịch vụ IAM, tại Access Management, chọn Roles\nTìm và click các IAM roles như InvokeModelLambda-role-xxx, SavePredictionHistory-role-xxx, AmazonSageMaker-ExecutionRole-xxx.\nẢnh 11: Truy cập trang IAM.\nTips: Click 2 lần vào Last activity sẽ cực kỳ dễ tìm.\nGõ xác nhận delete và chọn delete.\nẢnh 12: Xóa API MLInferenceAPI.\nChú ý: Hãy chắc chắn rằng không còn dịch vụ nào còn được sử dụng gắn với các IAM role này.\n6. Xóa S3 Bucket S3 Bucket được Sagemaker tự động tạo để lưu model.\nTruy cập trang S3, chọn bucket cần xóa → Delete\nẢnh 13: Truy cập trang S3.\nLúc này sẽ có 1 dòng cảnh báo This bucket is not empty, các bạn chọn Empty bucket để tự động dọn bucket.\nẢnh 14: Dọn sạch bucket.\nSau đó các bạn gõ xác nhận permanently delete, sau đó nhấn Empty để hoàn tất xóa S3 bucket.\n\u0026ndash;\n✅ Xong nè! Giờ bạn đã dọn sạch tài nguyên để tránh phát sinh chi phí không cần thiết rồi đó.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "🏁Workshop: Triển khai Ứng Dụng Nhận Diện Hình Ảnh Thời Gian Thực Serverless với Lambda và SageMaker 🚀 Chào mừng bạn đến với Workshop: Triển khai Ứng Dụng Nhận Diện Hình Ảnh Thời Gian Thực Serverless với Lambda và SageMaker! Đây là một chương trình đào tạo thực hành kéo dài 6 giờ, giúp bạn xây dựng một ứng dụng web serverless nhận diện ảnh thời gian thực sử dụng Amazon Web Services (AWS). Sử dụng các dịch vụ như S3, API Gateway, Lambda, DynamoDB, và SageMaker, bạn sẽ học cách triển khai một hệ thống hoàn chỉnh từ giao diện tĩnh đến backend, tích hợp sao lưu tự động và giám sát hiệu suất.\n🔰Giới Thiệu 🧠Workshop này được thiết kế để trang bị kỹ năng thực tiễn về kiến trúc serverless và điện toán đám mây cho lập trình viên, sinh viên CNTT, và chuyên gia IT. Qua 8 phần thực hành, bạn sẽ:\nXây dựng giao diện web cơ bản với HTML, CSS. Tích hợp backend serverless với AWS Lambda, API Gateway, và DynamoDB. Tải model lên SageMaker Endpoint. Workshop phù hợp cho các tổ chức giáo dục, trung tâm đào tạo, và doanh nghiệp muốn nâng cao năng lực công nghệ đám mây. Sau khi hoàn thành, bạn sẽ có một dự án thực tế để bổ sung vào portfolio và kỹ năng triển khai ứng dụng serverless chuyên nghiệp.\nThông Tin Sinh Viên Thực Tập 👨‍🎓 📛Họ và Tên: Nguyễn Trần Nhật Nam 🏫Trường: Trường Đại Học Công nghệ Thành phố Hồ Chí Minh (HUTECH) 🆔MSSV: 2180608712 📧Gmail: nhatnam.ngtr@gmail.com 💻GitHub: ngtrnhatnam 🧩Nội Dung Chính 📦Workshop bao gồm 8 phần thực hành, từ giới thiệu serverless đến triển khai và dọn dẹp tài nguyên:\n📚Phần 📌Nội Dung 📝Mô Tả 1 📖Giới Thiệu Tổng quan serverless, lợi ích, và kiến trúc hệ thống. 2 ⚙️Chuẩn Bị Thiết lập tài khoản AWS, AWS CLI, và môi trường phát triển. 3 🧠Triển khai nhanh SageMaker AI Tạo SageMaker để upload model lên SageMaker Endpoint. 4 🎥Tạo DynamoDB Tạo DynamoDB để lưu lịch sử ảnh đã dự đoán 5 🔗Cấu Hình Lambda và API Tạo Lambda functions để xử lý logic và cấu hình API tích hợp Lambda. 6 🎨Giao Diện Web Thiết kế giao diện đơn giản với HTML và CSS. 7 🧪Kiểm Tra Kết Quả Xác minh hoạt động của giao diện, API, và sao lưu. 8 🧹Dọn Dẹp Tài Nguyên Xóa tài nguyên để tránh chi phí dư thừa. 🛠️Công Cụ Sử Dụng:\n🖥️AWS Management Console, AWS CLI: Cấu hình dịch vụ AWS. 💻Visual Studio Code: Viết mã Python, HTML/CSS/JS. 🚀Hướng Dẫn Cài Đặt và Chạy Dự Án 🔽1. Clone Mã Nguồn từ GitHub Mở terminal và chạy lệnh sau để sao chép mã nguồn về máy: git clone https://github.com/ngtrnhatnam/Serverless-ML-Inference-with-Lambda-and-SageMaker cd Serverless-ML-Inference-with-Lambda-and-SageMaker 🧰2. Install Required Tools AWS CLI: Cài đặt theo hướng dẫn tại https://aws.amazon.com/cli/. Python: Tải và cài đặt từ https://www.python.org/ để upload model. Visual Studio Code: Tải tại https://code.visualstudio.com/ để chỉnh sửa mã. 🧪3. Chạy và Kiểm Tra Dự Án Mở main.html cục bộ trong trình duyệt để kiểm tra giao diện tĩnh. Xem chi tiết content để hiểu toàn bộ quy trình. 🧱Yêu Cầu Hệ Thống ⚙️Yêu Cầu 💡Mô Tả 💻Hệ Điều Hành Windows, macOS, hoặc Linux ☁️AWS Account Tài khoản AWS Free Tier (khuyến nghị) 🔧Công Cụ AWS CLI, Python (3.13+), Visual Studio Code 🌐Trình Duyệt Chrome, Firefox, hoặc Edge (hỗ trợ JavaScript) 📶Kết Nối Internet ổn định để truy cập AWS và GitHub 📚Tài Liệu Tham Khảo 🔗The First Cloud Journey 🌟AWS Special Force Portal 🧠AWS Serverless Workshops 📖AWS Documentation 📬Liên Hệ Có thắc mắc hoặc cần hỗ trợ? Hãy liên hệ với tôi:\n📧Nguyễn Trần Nhật Nam: nhatnam.ngtr@gmail.com 🌟 Cảm ơn bạn đã quan tâm đến workshop của tôi! Tham gia để làm chủ công nghệ serverless và xây dựng ứng dụng hiện đại với AWS! 🚀\n📄License This project is licensed under the terms of the MIT license.\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]